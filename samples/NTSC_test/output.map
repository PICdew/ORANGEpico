
Allocating common symbols
Common symbol       size              file

intUsed             0x6               interrupt.o
intCountLimit       0x18              interrupt.o
intCount            0x18              interrupt.o

Discarded input sections

 .text          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .data          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .bss           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .reginfo       0x0000000000000000       0x18 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .pdr           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .init          0x0000000000000000        0x8 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .fini          0x0000000000000000        0x8 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
 .text          0x0000000000000000      0x1b4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .data          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .bss           0x0000000000000000       0x20 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .reginfo       0x0000000000000000       0x18 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .ctors         0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .dtors         0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .jcr           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .tm_clone_table
                0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .sdata         0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .fini          0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .init          0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .text          0x0000000000000000        0x0 crt.o
 .data          0x0000000000000000        0x0 crt.o
 .bss           0x0000000000000000        0x0 crt.o
 .reginfo       0x0000000000000000       0x18 crt.o
 .pdr           0x0000000000000000       0x40 crt.o
 .data          0x0000000000000000        0x0 ISRwrapper.o
 .bss           0x0000000000000000        0x0 ISRwrapper.o
 .reginfo       0x0000000000000000       0x18 ISRwrapper.o
 .pdr           0x0000000000000000       0x40 ISRwrapper.o
 .text          0x0000000000000000        0x0 main.o
 .data          0x0000000000000000        0x0 main.o
 .bss           0x0000000000000000        0x0 main.o
 .reginfo       0x0000000000000000       0x18 main.o
 .pdr           0x0000000000000000       0xa0 main.o
 .text.system_lock
                0x0000000000000000       0x10 main.o
 .text          0x0000000000000000        0x0 interrupt.o
 .data          0x0000000000000000        0x0 interrupt.o
 .bss           0x0000000000000000        0x0 interrupt.o
 .reginfo       0x0000000000000000       0x18 interrupt.o
 .pdr           0x0000000000000000      0x1e0 interrupt.o
 .text.IntSetVectorPriority
                0x0000000000000000      0x180 interrupt.o
 .text.IntGetVectorPriority
                0x0000000000000000       0x48 interrupt.o
 .text.IntGetVectorSubPriority
                0x0000000000000000       0x48 interrupt.o
 .text.IntClearFlag
                0x0000000000000000       0x20 interrupt.o
 .text.IntGetFlag
                0x0000000000000000       0x1c interrupt.o
 .text.IntEnable
                0x0000000000000000       0x20 interrupt.o
 .text.IntDisable
                0x0000000000000000       0x20 interrupt.o
 .text.IntGetInterruptVectorNumber
                0x0000000000000000       0x10 interrupt.o
 .text.IntGetInterruptVectorPriority
                0x0000000000000000       0x10 interrupt.o
 .text.IntDisableInterrupts
                0x0000000000000000        0xc interrupt.o
 .text.IntEnableInterrupts
                0x0000000000000000        0xc interrupt.o
 .text.IntRestoreInterrupts
                0x0000000000000000       0x10 interrupt.o
 .text.IntSetEBASE
                0x0000000000000000       0x10 interrupt.o
 .text.TMR_X_calc_preset_divider
                0x0000000000000000       0x7c interrupt.o
 COMMON         0x0000000000000000       0x38 interrupt.o
 .text          0x0000000000000000        0x0 serial.o
 .data          0x0000000000000000        0x0 serial.o
 .bss           0x0000000000000000        0x0 serial.o
 .reginfo       0x0000000000000000       0x18 serial.o
 .pdr           0x0000000000000000      0x1e0 serial.o
 .text.get_PeripheralClock
                0x0000000000000000        0x8 serial.o
 .text.near_div
                0x0000000000000000       0x18 serial.o
 .text.SerialSetLineControl
                0x0000000000000000        0xc serial.o
 .text.SerialPinConfigure
                0x0000000000000000       0x20 serial.o
 .text.UARTwrite
                0x0000000000000000       0x20 serial.o
 .text.UARTgetpacket
                0x0000000000000000       0x24 serial.o
 .text          0x0000000000000000        0x0 fifo.o
 .data          0x0000000000000000        0x0 fifo.o
 .bss           0x0000000000000000        0x0 fifo.o
 .reginfo       0x0000000000000000       0x18 fifo.o
 .pdr           0x0000000000000000       0xa0 fifo.o
 .text.FIFO_getfreesize
                0x0000000000000000       0x10 fifo.o
 .text          0x0000000000000000        0x0 NVMem.o
 .data          0x0000000000000000        0x0 NVMem.o
 .bss           0x0000000000000000        0x0 NVMem.o
 .reginfo       0x0000000000000000       0x18 NVMem.o
 .pdr           0x0000000000000000       0xa0 NVMem.o
 .mdebug.abi32  0x0000000000000000        0x0 NVMem.o
 .text.NVMemOperation
                0x0000000000000000       0x68 NVMem.o
 .text.NVMemErasePage
                0x0000000000000000       0x20 NVMem.o
 .text.NVMemWriteWord
                0x0000000000000000       0x28 NVMem.o
 .text.NVMemWriteRow
                0x0000000000000000       0x28 NVMem.o
 .text.NVMemClearError
                0x0000000000000000       0x10 NVMem.o
 .sdata.countPerMicroSec
                0x0000000000000000        0x4 NVMem.o
 .comment       0x0000000000000000       0x12 NVMem.o
 .gnu.attributes
                0x0000000000000000       0x10 NVMem.o
 .text          0x0000000000000000        0x0 util.o
 .data          0x0000000000000000        0x0 util.o
 .bss           0x0000000000000000        0x0 util.o
 .reginfo       0x0000000000000000       0x18 util.o
 .pdr           0x0000000000000000      0x140 util.o
 .text.led_flip
                0x0000000000000000       0x10 util.o
 .text.memcpy   0x0000000000000000       0x14 util.o
 .text.memset   0x0000000000000000       0x10 util.o
 .text.wait_nloop
                0x0000000000000000        0x8 util.o
 .text.delay_us
                0x0000000000000000       0x10 util.o
 .text.wait_ms  0x0000000000000000       0x1c util.o
 .text.led_test
                0x0000000000000000       0x18 util.o
 .text          0x0000000000000000        0x0 config.o
 .data          0x0000000000000000        0x0 config.o
 .bss           0x0000000000000000        0x0 config.o
 .reginfo       0x0000000000000000       0x18 config.o
 .text          0x0000000000000000        0x0 C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
 .data          0x0000000000000000        0x0 C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
 .bss           0x0000000000000000        0x0 C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
 .reginfo       0x0000000000000000       0x18 C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
 .pdr           0x0000000000000000        0x0 C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
 .text          0x0000000000000000       0x60 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .data          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .bss           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .reginfo       0x0000000000000000       0x18 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .ctors         0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .dtors         0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .jcr           0x0000000000000000        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .tm_clone_table
                0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .init          0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
 .text          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .data          0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .bss           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .reginfo       0x0000000000000000       0x18 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .pdr           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .init          0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
 .fini          0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o

Memory Configuration

Name             Origin             Length             Attributes
exception_mem    0x000000009d001000 0x0000000000001000
kseg0_program_mem 0x000000009d001610 0x0000000000001c00 xr
debug_exec_mem   0x000000009d001490 0x0000000000000760
kseg0_boot_mem   0x000000009d001490 0x0000000000000000
kseg1_boot_mem   0x00000000bfc00000 0x0000000000000490
kseg0rom         0x000000009d000000 0x0000000000000180
bootrom          0x000000009d001000 0x00000000000005f4
config3          0x00000000bfc00bf0 0x0000000000000004
config2          0x00000000bfc00bf4 0x0000000000000004
config1          0x00000000bfc00bf8 0x0000000000000004
config0          0x00000000bfc00bfc 0x0000000000000004
boot_software_key 0x00000000a0000000 0x0000000000000004
kseg1_data_mem   0x00000000a0000004 0x0000000000001ffc w !x
sfrs             0x00000000bf800000 0x0000000000100000
configsfrs       0x00000000bfc00bf0 0x0000000000000010
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crti.o
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
                0x0000000000000200                _min_heap_size = 0x200
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el\libm.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el\libgcc.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el\libc.a
LOAD crt.o
LOAD ISRwrapper.o
LOAD main.o
LOAD interrupt.o
LOAD serial.o
LOAD fifo.o
LOAD NVMem.o
LOAD util.o
LOAD config.o
LOAD C:\pinguino-11/user/source/obj/non-free/32MX220F032B.o
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el\libm.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el\libgcc.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el\libc.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el\libgcc.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el\libgcc.a
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o
LOAD c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtn.o
                0x0000000000000001                PROVIDE (_vector_spacing, 0x1)
                0x000000009d001000                _ebase_address = 0x9d001000
                0x00000000bfc00000                _RESET_ADDR = 0xbfc00000
                0x00000000bfc00380                _BEV_EXCPT_ADDR = 0xbfc00380
                0x00000000bfc00480                _DBG_EXCPT_ADDR = 0xbfc00480
                0x000000009d002490                _DBG_CODE_ADDR = 0x9d002490
                0x0000000000000760                _DBG_CODE_SIZE = 0x760
                0x000000009d001180                _GEN_EXCPT_ADDR = (_ebase_address + 0x180)

.boot_software_key
 *(.boot_software_key)

.bootrom        0x000000009d001000      0x110
 *(.bootrom)
 .bootrom       0x000000009d001000       0xec crt.o
 .bootrom       0x000000009d0010ec       0x24 util.o
                0x000000009d0010ec                INTDisableInterrupts
                0x000000009d0010f4                INTRestoreInterrupts

.kseg0rom
 *(.kseg0rom)

.config_BFC00BF0
                0x00000000bfc00bf0        0x4
 *(.config_BFC00BF0)
 .config_BFC00BF0
                0x00000000bfc00bf0        0x4 config.o
                0x00000000bfc00bf0                _config3

.config_BFC00BF4
                0x00000000bfc00bf4        0x4
 *(.config_BFC00BF4)
 .config_BFC00BF4
                0x00000000bfc00bf4        0x4 config.o
                0x00000000bfc00bf4                _config2

.config_BFC00BF8
                0x00000000bfc00bf8        0x4
 *(.config_BFC00BF8)
 .config_BFC00BF8
                0x00000000bfc00bf8        0x4 config.o
                0x00000000bfc00bf8                _config1

.config_BFC00BFC
                0x00000000bfc00bfc        0x4
 *(.config_BFC00BFC)
 .config_BFC00BFC
                0x00000000bfc00bfc        0x4 config.o
                0x00000000bfc00bfc                _config0
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)

.reset          0x00000000bfc00000       0x10
 *(.reset)
 .reset         0x00000000bfc00000       0x10 crt.o
                0x00000000bfc00000                _reset

.startup
 *(.startup)

.boot_software_key_sec
 *(.boot_software_key_sec)

.vector_0       0x000000009d001200        0x0
 *(.vector_0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)

.vector_1       0x000000009d001220        0x0
 *(.vector_1)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)

.vector_2       0x000000009d001240        0x0
 *(.vector_2)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)

.vector_3       0x000000009d001260        0x0
 *(.vector_3)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)

.vector_4       0x000000009d001280        0x0
 *(.vector_4)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)

.vector_5       0x000000009d0012a0        0x0
 *(.vector_5)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)

.vector_6       0x000000009d0012c0        0x0
 *(.vector_6)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)

.vector_7       0x000000009d0012e0        0x0
 *(.vector_7)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)

.vector_8       0x000000009d001300        0x0
 *(.vector_8)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)

.vector_9       0x000000009d001320        0x0
 *(.vector_9)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)

.vector_10      0x000000009d001340        0x0
 *(.vector_10)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)

.vector_11      0x000000009d001360        0x0
 *(.vector_11)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)

.vector_12      0x000000009d001380        0x0
 *(.vector_12)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)

.vector_13      0x000000009d0013a0        0x0
 *(.vector_13)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)

.vector_14      0x000000009d0013c0        0x0
 *(.vector_14)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)

.vector_15      0x000000009d0013e0        0x0
 *(.vector_15)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)

.vector_16      0x000000009d001400        0x0
 *(.vector_16)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)

.vector_17      0x000000009d001420        0x0
 *(.vector_17)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)

.vector_18      0x000000009d001440        0x0
 *(.vector_18)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)

.vector_19      0x000000009d001460        0x0
 *(.vector_19)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)

.vector_20      0x000000009d001480        0x0
 *(.vector_20)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)

.vector_21      0x000000009d0014a0        0x0
 *(.vector_21)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)

.vector_22      0x000000009d0014c0        0x0
 *(.vector_22)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)

.vector_23      0x000000009d0014e0        0x0
 *(.vector_23)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)

.vector_24      0x000000009d001500        0x0
 *(.vector_24)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)

.vector_25      0x000000009d001520        0x0
 *(.vector_25)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)

.vector_26      0x000000009d001540        0x0
 *(.vector_26)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)

.vector_27      0x000000009d001560        0x0
 *(.vector_27)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)

.vector_28      0x000000009d001580        0x0
 *(.vector_28)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)

.vector_29      0x000000009d0015a0        0x0
 *(.vector_29)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)

.vector_30      0x000000009d0015c0        0x0
 *(.vector_30)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)

.vector_31      0x000000009d0015e0        0x0
 *(.vector_31)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)

.vector_32      0x000000009d001600        0xc
 *(.vector_32)
 .vector_32     0x000000009d001600        0xc ISRwrapper.o
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)

.vector_33      0x000000009d001620        0x0
 *(.vector_33)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)

.vector_34      0x000000009d001640        0x0
 *(.vector_34)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)

.vector_35      0x000000009d001660        0x0
 *(.vector_35)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)

.vector_36      0x000000009d001680        0x0
 *(.vector_36)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)

.vector_37      0x000000009d0016a0        0x0
 *(.vector_37)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)

.vector_38      0x000000009d0016c0        0x0
 *(.vector_38)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)

.vector_39      0x000000009d0016e0        0x0
 *(.vector_39)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)

.vector_40      0x000000009d001700        0x0
 *(.vector_40)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)

.vector_41      0x000000009d001720        0x0
 *(.vector_41)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)

.vector_42      0x000000009d001740        0x0
 *(.vector_42)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)

.vector_43      0x000000009d001760        0x0
 *(.vector_43)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)

.vector_44      0x000000009d001780        0x0
 *(.vector_44)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)

.vector_45      0x000000009d0017a0        0x0
 *(.vector_45)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)

.vector_46      0x000000009d0017c0        0x0
 *(.vector_46)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)

.vector_47      0x000000009d0017e0        0x0
 *(.vector_47)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)

.vector_48      0x000000009d001800        0x0
 *(.vector_48)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)

.vector_49      0x000000009d001820        0x0
 *(.vector_49)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)

.vector_50      0x000000009d001840        0x0
 *(.vector_50)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)

.vector_51      0x000000009d001860        0x0
 *(.vector_51)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)

.vector_52      0x000000009d001880        0x0
 *(.vector_52)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)

.vector_53      0x000000009d0018a0        0x0
 *(.vector_53)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)

.vector_54      0x000000009d0018c0        0x0
 *(.vector_54)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)

.vector_55      0x000000009d0018e0        0x0
 *(.vector_55)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)

.vector_56      0x000000009d001900        0x0
 *(.vector_56)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)

.vector_57      0x000000009d001920        0x0
 *(.vector_57)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)

.vector_58      0x000000009d001940        0x0
 *(.vector_58)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)

.vector_59      0x000000009d001960        0x0
 *(.vector_59)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)

.vector_60      0x000000009d001980        0x0
 *(.vector_60)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)

.vector_61      0x000000009d0019a0        0x0
 *(.vector_61)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)

.vector_62      0x000000009d0019c0        0x0
 *(.vector_62)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)

.vector_63      0x000000009d0019e0        0x0
 *(.vector_63)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)

.text           0x000000009d001610      0x578
                0x000000009d001610                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text          0x000000009d001610      0x110 ISRwrapper.o
                0x000000009d001614                vector_32_ISR_wrapper
 .text.system_unlock
                0x000000009d001720       0x1c main.o
                0x000000009d001721                system_unlock
 .text.io_setDigital
                0x000000009d00173c       0x24 main.o
                0x000000009d00173d                io_setDigital
 .text.io_setRemap
                0x000000009d001760       0x74 main.o
                0x000000009d001761                io_setRemap
 .text.startup.main
                0x000000009d0017d4       0x70 main.o
                0x000000009d0017d5                main
 .text.IntConfigureSystem
                0x000000009d001844       0x98 interrupt.o
                0x000000009d001844                IntConfigureSystem
 .text.SerialSetDataRate
                0x000000009d0018dc       0x3c serial.o
                0x000000009d0018dd                SerialSetDataRate
 .text.SerialIntConfigure
                0x000000009d001918       0x4c serial.o
                0x000000009d001919                SerialIntConfigure
 .text.SerialConfigure
                0x000000009d001964       0x6c serial.o
                0x000000009d001965                SerialConfigure
 .text.Serial1WriteChar
                0x000000009d0019d0       0x2c serial.o
                0x000000009d0019d0                Serial1WriteChar
 .text.Serial1Available
                0x000000009d0019fc       0x14 serial.o
                0x000000009d0019fd                Serial1Available
 .text.Serial1Read
                0x000000009d001a10       0x2c serial.o
                0x000000009d001a11                Serial1Read
 .text.Serial1GetKey
                0x000000009d001a3c       0x1c serial.o
                0x000000009d001a3d                Serial1GetKey
 .text.Serial1WriteString
                0x000000009d001a58       0x18 serial.o
                0x000000009d001a59                Serial1WriteString
 .text.Serial1Interrupt
                0x000000009d001a70       0x6c serial.o
                0x000000009d001a71                Serial1Interrupt
 .text.FIFO_init
                0x000000009d001adc        0xc fifo.o
                0x000000009d001add                FIFO_init
 .text.FIFO_enqueue
                0x000000009d001ae8       0x34 fifo.o
                0x000000009d001ae9                FIFO_enqueue
 .text.FIFO_getsize
                0x000000009d001b1c       0x10 fifo.o
                0x000000009d001b1d                FIFO_getsize
 .text.FIFO_dequeue
                0x000000009d001b2c       0x30 fifo.o
                0x000000009d001b2d                FIFO_dequeue
 .text.led_blink
                0x000000009d001b5c       0x2c util.o
                0x000000009d001b5d                led_blink
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d001b88                _text_end = .

.rodata         0x000000009d001b88       0x14
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.4
                0x000000009d001b88       0x14 main.o
 *(.rodata1)
                0x000000009d001b9c                . = ALIGN (0x4)

.sdata2         0x000000009d001b9c        0x0
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d001b9c                . = ALIGN (0x4)

.sbss2          0x000000009d001b9c        0x0
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d001b9c                . = ALIGN (0x4)

.eh_frame_hdr
 *(.eh_frame_hdr)

.eh_frame       0x000000009d001b9c        0x4
 *(.eh_frame)
 .eh_frame      0x000000009d001b9c        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .eh_frame      0x000000009d001b9c        0x4 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o

.dbg_data       0x00000000a0000004        0x0
                0x00000000a0000004                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)

.data           0x00000000a0000004        0x0 load address 0x000000009d001ba0
                0x00000000a0000004                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x000000009d001ba0                _data_image_begin = LOADADDR (.data)

.eh_frame
 *(.eh_frame)
                0x00000000a0008000                _gp = (ALIGN (0x10) + 0x7ff0)

.got
 *(.got.plt)
 *(.got)

.sdata          0x00000000a0000004        0x0 load address 0x000000009d001ba0
                0x00000000a0000004                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000000a0000004                _sdata_end = .

.lit8
 *(.lit8)

.lit4
 *(.lit4)
                0x00000000a0000004                . = ALIGN (0x4)
                0x00000000a0000004                _data_end = .
                0x00000000a0000004                _bss_begin = .

.sbss           0x00000000a0000004        0x4 load address 0x000000009d001ba0
                0x00000000a0000004                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 .sbss.cnt.7002
                0x00000000a0000004        0x4 util.o
 *(.scommon)
                0x00000000a0000008                _sbss_end = .

.bss            0x00000000a0000008      0x110 load address 0x000000009d001ba0
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss.rx_buff   0x00000000a0000008      0x100 serial.o
 .bss.rx_fifo   0x00000000a0000108       0x10 serial.o
 *(COMMON)
                0x00000000a0000118                . = ALIGN (0x4)
                0x00000000a0000118                . = ALIGN (0x4)
                0x00000000a0000118                _end = .
                0x00000000a0000118                _bss_end = .

.heap           0x00000000a0000118      0x200
                0x00000000a0000118                _heap = .
                0x00000000a0000318                . = (. + _min_heap_size)
 *fill*         0x00000000a0000118      0x200 

.stack          0x00000000a0000318      0x400
                0x00000000a0000318                _splim = .
                0x00000000a0000318                _SPLIM = .
                0x00000000a0000718                . = (. + _min_stack_size)
 *fill*         0x00000000a0000318      0x400 

.ramfunc        0x00000000a0000800        0x0 load address 0x000000009d001ba0
                0x00000000a0000800                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0000800                . = ALIGN (0x4)
                0x00000000a0000800                _ramfunc_end = .
                0x000000009d001ba0                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x00000000000007fc                _bmxdkpba_address = (_ramfunc_begin - ORIGIN (kseg1_data_mem))
                0x0000000000001ffc                _bmxdudba_address = 0x1ffc
                0x0000000000001ffc                _bmxdupba_address = 0x1ffc
                0x00000000a0002000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):(ORIGIN (kseg1_data_mem) + 0x1ffc)
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)

.pdr            0x0000000000000000        0x0
 *(.pdr)
 .pdr           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .pdr           0x0000000000000000        0x0 config.o
 .pdr           0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o

.mdebug.abi32   0x0000000000000000        0x0
 .mdebug.abi32  0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .mdebug.abi32  0x0000000000000000        0x0 main.o
 .mdebug.abi32  0x0000000000000000        0x0 interrupt.o
 .mdebug.abi32  0x0000000000000000        0x0 serial.o
 .mdebug.abi32  0x0000000000000000        0x0 fifo.o
 .mdebug.abi32  0x0000000000000000        0x0 util.o
 .mdebug.abi32  0x0000000000000000        0x0 config.o
 .mdebug.abi32  0x0000000000000000        0x0 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o

.comment        0x0000000000000000       0x11
 .comment       0x0000000000000000       0x11 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 main.o
 .comment       0x0000000000000000       0x12 interrupt.o
 .comment       0x0000000000000000       0x12 serial.o
 .comment       0x0000000000000000       0x12 fifo.o
 .comment       0x0000000000000000       0x12 util.o
 .comment       0x0000000000000000       0x12 config.o
 .comment       0x0000000000000000       0x12 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o

.gnu.attributes
                0x0000000000000000       0x10
 .gnu.attributes
                0x0000000000000000       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtbegin.o
 .gnu.attributes
                0x0000000000000010       0x10 main.o
 .gnu.attributes
                0x0000000000000020       0x10 interrupt.o
 .gnu.attributes
                0x0000000000000030       0x10 serial.o
 .gnu.attributes
                0x0000000000000040       0x10 fifo.o
 .gnu.attributes
                0x0000000000000050       0x10 util.o
 .gnu.attributes
                0x0000000000000060       0x10 config.o
 .gnu.attributes
                0x0000000000000070       0x10 c:/pinguino-11/compilers/p32/bin/../lib/gcc/mips-elf/4.9.2/soft-float/el/crtend.o

.reginfo
 *(.reginfo)
OUTPUT(.\main32.elf elf32-littlemips)
